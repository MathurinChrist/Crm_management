security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

  providers:
    app_user_provider:
      entity:
        class: App\Security\Entity\User
        property: email
  firewalls:
    login:
      pattern: ^/api/v1/login
      stateless: true
      json_login:
        check_path: api_login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    logout:
      pattern: ^/api/v1/logout
    api:
      pattern: ^/api
      stateless: true
      jwt: ~

  role_hierarchy:
    ROLE_SUPER_ADMIN: ROLE_SUPER_ADMIN
    ROLE_MANAGER:

  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/v1/user/admin/signIn, roles: PUBLIC_ACCESS }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/admin/users', roles: ROLE_SUPER_ADMIN }
    - { path: '^/admin', roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
